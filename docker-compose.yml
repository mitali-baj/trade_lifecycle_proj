version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:6.2.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:6.2.0
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:29092 --list || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  db:
    image: postgres:latest
    container_name: postgres_db
    environment:
      POSTGRES_DB: trade_db
      POSTGRES_USER: trade_user
      POSTGRES_PASSWORD: trade_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trade_user -d trade_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  trade-capture:
    image: trade-capture:latest
    container_name: trade_capture_service
    build:
      context: ./src/trade-capture
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      kafka:
        condition: service_healthy
      db:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/trade_db
      SPRING_DATASOURCE_USERNAME: trade_user
      SPRING_DATASOURCE_PASSWORD: trade_password
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092

  trade-enrichment:
    image: trade-enrichment:latest
    container_name: trade_enrichment_service
    build:
      context: ./src/trade-enrichment
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    depends_on:
      kafka:
        condition: service_healthy
      db:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/trade_db
      SPRING_DATASOURCE_USERNAME: trade_user
      SPRING_DATASOURCE_PASSWORD: trade_password
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092

  trade-validation-settlement:
    image: trade-validation-settlement:latest
    container_name: trade_validation_settlement_service
    build:
      context: ./src/trade-validation-settlement
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    depends_on:
      kafka:
        condition: service_healthy
      db:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/trade_db
      SPRING_DATASOURCE_USERNAME: trade_user
      SPRING_DATASOURCE_PASSWORD: trade_password
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
  
  trade-simulation:
    image: trade-simulation:latest
    container_name: trade_simulation_service
    build:
      context: ./src/trade-simulation
      dockerfile: Dockerfile
    ports:
      - "8083:8083"

volumes:
  postgres_data:
